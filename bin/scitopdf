#!/bin/bash
#

# Folder in which papers are downloaded #
destination=$HOME/downloads/scihub

if ! [ -d $destination ]; then
	mkdir $destination
fi

# Check internet connexion to avoid being stucked # TODO
connexion_status=$(echo $(ping -q -w1 -c1 1.1.1.1 &>/dev/null && echo online || echo offline))
if [ $(echo $connexion_status) = "offline" ]; then
	echo No internet connexion.
	exit 1
fi

# Automatically open PDF after download #
automatically_open="yes"

##############
# Functions  #
##############
	# Find website #
locate_website() {
echo "Looking for Sci-Hub http address..."
site=$(curl -s -LH "" "https://sci-hub.now.sh/" | grep -i https://sci-hub... | grep -i biglink | grep -io https://sci-hub... | head -n 1)
echo "Checking connexion to : $site"
if [[ $(echo $(curl -v $site 2>&1) | grep -io "Could not resolve" | tail -n 1) = $(echo "Could not resolve") ]]; then
	echo "Sci-Hub's website not found. Check https://sci-hub.now.sh/"
	exit 1;
else
	echo $site > /tmp/sci_address
	echo Sci-hub is here : $site
fi
}

	# Looking for DOI on Crossref #
doi_search() {
echo "Paper found on Crossref. Extracting DOI."
doi=$(curl -A "Mozilla/5.0 (x11; ubuntu; linux x86_64; rv:59.0) gecko/20100101 firefox/59.0" -s "https://search.crossref.org/?q=$user_search&from_ui=yes" | grep -io "https://doi.*" | grep -io "doi.*" | sed 's/http:\/\///' | grep -io "/.*" | sed 's/\///' | head -n 2 | tail -n 1)
if ! [[ $(echo $doi) = "" ]]; then
	if [[ $(echo $doi | grep -io "doi:") = "doi:" || $(echo $doi | grep -io "doi.") = "doi." ]]; then
		echo ""
		echo "DOI : $doi"
		echo ""
		doi=$(echo $doi | sed 's/http:\/\///' | grep -io "/.*" | sed 's/\///')
	fi
	echo "DOI : $doi"
else
	echo "DOI not found."
	exit 1;
fi
}

	# Looking for paper #
paper_search() {
if ! [[ $(echo "$concatenate") = "" ]]; then
	#user_search=$(echo $concatenate | sed "s/'/\ /g" | sed 's/\ /+/g' | iconv -f utf8 -t ascii//TRANSLIT)
	user_search=$(echo $concatenate | sed "s/'/\ /" | sed 's/\ /+/g' | iconv -f utf8 -t ascii//TRANSLIT)
	#notify-send "Scitopdf looking for '$(echo $user_search | sed 's/+/\ /g')'"
	if [[ $(echo $(curl -A "Mozilla/5.0 (x11; ubuntu; linux x86_64; rv:59.0) gecko/20100101 firefox/59.0" -s "https://search.crossref.org/?q=$user_search&from_ui=yes") | grep -io "$user_search" | head -n 1) = "$user_search" ]]; then
		doi_search
	fi
	download_link=$(curl -s "$site/$doi" | grep -io "http.*\.pdf" | head -n 1)
	if [[ $download_link = "" ]]; then
		echo "Empty download link."
		exit
	fi
	echo "Download link : $download_link"
	filename=$(echo $download_link | sed 's:.*/::')
	cd $destination
	if [[ $(echo $filename) == "" ]]; then
		if [[ $(echo $(curl -s $site/$doi) | grep -io "article not found") = "article not found" ]]; then
			#notify-send "Paper not available on Sci-Hub."
			echo "Paper not available on Sci-Hub."
		else
			#notify-send "Paper not found."
			echo "Paper not found.\\nPlease check if your country is not blocking access to Sci-Hub. Use a VPN if possible."
			exit 1;
		fi
	else
		echo "Downloading '$filename' to '$destination'."
		curl "$download_link" --output "$filename" --progress-bar
		#notify-send "$filename downloaded."
		echo "Done."
		if [ $(echo $automatically_open) = "yes" ]; then
			setsid $READER "$destination/$filename"
		fi
#		exit 1;
	fi
else
	echo "Paste informations (title, or DOI, http address, authors' names, year, journal ...) : "
	read concatenate
	paper_search
fi
}


################
# Start script #
################
# Option to download articles from a list #
# Arguments evaluation : if "-l" or "--list" as first argument, then scitopdf will look inside a .txt file (2nd argument) which would contain several references
if [[ $(echo $1) = "-l" || $(echo $1) = "--list" ]]; then
	automatically_open="no"
	locate_website
	while read line; do concatenate=$(echo $line);  paper_search "$line"; done < $2
	exit 1
else
	# If no option specified, then every word following scitopdf is considered as the title
	# regrouper les arguments dans une liste
	args=("$@")
	# nombre d'arguments
	ELEMENTS=${#args[@]}
	# echo chaque element dans une liste
	for (( i=0;i<$ELEMENTS;i++)); do
	    #echo -n ${args[${i}]}"\ "
	    concatenate=$(echo $concatenate" ")$(echo -n ${args[${i}]}"\ ")
	done
fi

if [[ $(echo $concatenate | grep -io http) == "http" ]]; then
	locate_website
	concatenate=$(echo $concatenate | sed "s/'//g" | sed 's/\ //g' | sed 's/\\//g')
	download_link=$(echo $(curl -s $site/$concatenate) | grep -io "http.*\.pdf" | head -n 1)
	if [[ $(echo $download_link | cut -c1-2) == "//" ]]; then
		download_link=$(echo $download_link | sed 's/\/\//https:\/\//g')
	fi
	filename=$(echo $download_link | sed 's:.*/::')
	cd $destination
	if [[ $(echo $filename) == "" ]]; then
		#notify-send "Article not downloaded. Check Sci-Hub access."
		echo "Article not found. Please check if your country is not blocking access to Sci-Hub. Use a VPN if possible."
		exit;
	else
		echo "Downloading '$filename' to '$destination'."
		curl "$download_link" --output "$filename" --progress-bar
		#notify-send "$filename downloaded."
		echo "Done."
		if [ $(echo $automatically_open) = "yes" ]; then
			setsid $READER "$destination/$filename"
		fi
	fi
else
	concatenate=$(echo $concatenate | sed 's/\\//g')

	if [[ $(cat /tmp/sci_address 2> /dev/null) == "" ]]; then
		rm /tmp/sci_address 2> /dev/null
		locate_website
	fi

	if [ -f /tmp/sci_address ]; then
		site=$(echo $(cat /tmp/sci_address))
		paper_search
	else
		locate_website
		site=$(echo $(cat /tmp/sci_address))
		paper_search
	fi
fi


exit

# last modif : 05 sept 21
