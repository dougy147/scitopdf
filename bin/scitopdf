#!/bin/bash
#

# SCITOPDF
# DOWNLOAD ARTICLES FROM SCI-HUB

# Downloads folder
destination=$HOME/downloads/scitopdf

[ ! -d $destination ] && mkdir $destination

# Check internet connexion #
[[ -z $(ping -q -w1 -c1 1.1.1.1) ]] && echo "No internet connection." && exit 1

# Check $READER variable (pdf reader)
[[ -v READER ]] || echo "No PDF reader.\\nTry setting a \$READER variable, or install zathura." && READER=zathura

# Open PDF automatically after download #
automatically_open="yes"

# Temporary file with different headers avoid(ish)ing blocation
headers_file=/tmp/scitopdf_headers
[ ! -f "$headers_file" ] && touch "$headers_file"

# Timeout for Crossref : seems useless right now (03/2022)
# requests_timeout=6

##############
# Functions  #
##############
	#________________#
	# Change headers #
	#----------------#
change_headers() {
	sed -i '1d' "$headers_file"
	if [[ $(cat "$headers_file") == "" ]]; then
		echo "Mozilla/5.0 (x11; ubuntu; linux x86_64; rv:59.0) gecko/20100101 firefox/59.0" >> "$headers_file"
		echo "Mozilla/5.0 (iPad; CPU OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4" >> "$headers_file"
		echo "Mozilla/5.0 (Linux; U; Android 4.0.3; en-us; KFTT Build/IML74K) AppleWebKit/537.36 (KHTML, like Gecko) Silk/3.68 like Chrome/39.0.2171.93 Safari/537.36" >> "$headers_file"
		echo "Mozilla/5.0 (Windows NT 6.3; Win64; x64; Trident/7.0; rv:11.0) like Gecko" >> "$headers_file"
		echo "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:40.0) Gecko/20100101 Firefox/40.0" >> "$headers_file"
		echo "Mozilla/5.0 (X11; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0" >> "$headers_file"
		echo "Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0" >> "$headers_file"
		echo "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.1) Gecko/2008070208 Firefox/3.0.1" >> "$headers_file"
		echo "Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 BingPreview/1.0b" >> "$headers_file"
		echo "Mozilla/5.0 (Windows NT 6.3; Win64; x64; Trident/7.0; MAARJS; rv:11.0) like Gecko" >> "$headers_file"
		echo "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; SLCC2; .NET CLR 2.0.50727; .NET4.0C; .NET4.0E)" >> "$headers_file"
		echo "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.130 Safari/537.36" >> "$headers_file"
	fi
	headers=$(echo $(cat "$headers_file" | head -n 1))
	#echo "Current headers : $headers"
}
	#______________#
	# Find Sci-Hub #
	#--------------#
locate_website() {
echo $(tput bold)"Looking for website..."$(tput sgr0)
site=$(curl -s -LH "" "https://sci-hub.now.sh/" | grep -i https://sci-hub... | grep -i biglink | grep -io https://sci-hub... | head -n 1)
if [[ $(echo $(curl -v $site 2>&1) | grep -io "Could not resolve" | tail -n 1) = $(echo "Could not resolve") ]]; then
	echo "Sci-Hub not found. \\nCheck https://sci-hub.now.sh\\nFor manual website setting :\\n-insert Sci-Hub's url in the file '/tmp/sci_address'"
	exit 1;
else
	echo $site > "/tmp/sci_address"
	echo Sci-hub is here : $site
fi
}
	#__________________________#
	# Look for DOI on Crossref #
	#--------------------------#
doi_search() {
change_headers
if ! [[ $(echo $doi) = "" ]]; then
	if [[ $(echo $doi | grep -io "doi:") = "doi:" || $(echo $doi | grep -io "doi.") = "doi." ]]; then
		doi=$(echo $doi | sed 's/http:\/\///' | grep -io "/.*" | sed 's/\///')
		echo $(tput bold)"DOI : $(tput sgr0)$doi"
	fi
	echo $(tput bold)"DOI : $(tput sgr0)$doi"
else
	echo $(tput setaf 1)"DOI not found."$(tput sgr0)
	notify-send "scitopdf" "DOI not found."
	exit 1;
fi
}
	#________________#
	# Look for paper #
	#----------------#
paper_search() {
if ! [[ $(echo "$concatenate") = "" ]]; then
	change_headers
	user_search=$(echo $concatenate | sed "s/'/\ /" | sed 's/\ /+/g' | iconv -f utf8 -t ascii//TRANSLIT)
	#notify-send "scitopdf" "Looking for '$(echo $user_search | sed 's/+/\ /g')'"
	# if sci-hub's website in user search, download this specific link:
	if [[ $(echo $user_search | grep -o "$site") = "$site" ]]; then
		download_link=$(curl -s "$user_search" | grep -io "http.*\.pdf" | head -n 1)
		if [[ $download_link = "" ]]; then
			download_link=$(echo https:)$(curl -s "$user_search" | grep -io "\/\/.*\.pdf" | head -n 1)
		fi

	# if user search contains "/" it means it's either a DOI or an address, so immediately try on sci-hub :
	elif [[ $(echo $user_search | grep -o "\/") = "/" ]]; then
		user_address=$user_search
		download_link=$(curl -s "$site/$user_search" | grep -io "http.*\.pdf" | head -n 1)
		if [[ $download_link = "" ]]; then
			download_link=$(echo https:)$(curl -s "$site/$user_search" | grep -io "\/\/.*\.pdf" | head -n 1)
			if [[ $download_link = "https:" ]]; then
				echo "Empty download link. Trying address with Crossref."
				doi_search
				download_link=$(curl -s "$site/$doi" | grep -io "http.*\.pdf" | head -n 1)
				if [[ $download_link = "" ]]; then
					download_link=$(echo https:)$(curl -s "$site/$doi" | grep -io "\/\/.*\.pdf" | head -n 1)
				fi
				#notify-send "Empty download link."
			fi
		fi

	# else : search on crossref
	elif [[ $(echo $(curl -A $headers -s "https://search.crossref.org/?q=$user_search&from_ui=yes" | tee /tmp/scitopdf_curl.txt) | grep -io "$user_search" | head -n 1) = "$user_search" ]]; then
		doi=$(cat /tmp/scitopdf_curl.txt | grep -io "https://doi.*" | grep -io "doi.*" | sed 's/http:\/\///' | grep -io "/.*" | sed 's/\///' | head -n 2 | tail -n 1)
		doi_search
		download_link=$(curl -s "$site/$doi" | grep -io "http.*\.pdf" | head -n 1)
		if [[ $download_link = "" ]]; then
			download_link=$(echo https:)$(curl -s "$site/$doi" | grep -io "\/\/.*\.pdf" | head -n 1)
		fi
	fi

	if [[ $download_link = "" || $download_link = "https:" ]]; then
		echo $(tput setaf 1)"Empty download link."$(tput sgr0)
		#notify-send "Empty download link."
		exit
	fi
	#echo "Download link : $download_link"
	filename=$(echo $download_link | sed 's:.*/::')
	cd $destination
	if [[ $(echo $filename) == "" ]]; then
		if [[ $(echo $(curl -s $site/$doi) | grep -io "article not found") = "article not found" ]]; then
			#notify-send "Paper not available on Sci-Hub."
			echo $(tput setaf 3)"Paper not available on Sci-Hub."$(tput sgr0)
		else
			#notify-send "Paper not found."
			echo $(tput setaf 3)"Paper not found.\\nPlease check if your country is not blocking access to Sci-Hub. Use a VPN if possible."$(tput sgr0)
			exit 1;
		fi
	else
		#echo "Downloading '$filename' to '$destination'."
		echo $(tput bold)"Downloading ..."$(tput sgr0)
		#curl "$download_link" --output "$filename"
		curl "$download_link" --output "$filename" --progress-bar
		#notify-send "Paper downloaded!"
		echo $(tput setaf 2)"Done!"$(tput sgr0)
		if [ $(echo $automatically_open) = "yes" ]; then
			setsid $READER "$destination/$filename"
		fi
#		exit 1;
	fi
else
	echo $(tput bold)"Paper to search $(tput sgr0)[title, author, year, DOI, journal, URL...] : "
	read concatenate
	paper_search
fi
}


################
# Start script #
################
# Arguments' evaluation : if "-l" or "--list" as first argument, scitopdf looks inside a file (2nd argument) which should contain several references
if [[ $(echo $1) = "-l" || $(echo $1) = "--list" ]]; then
	automatically_open="no"
	locate_website
	while read line; do concatenate=$(echo $line);  paper_search "$line"; done < $2
	exit 1
else
	# If no option specified, then every word following scitopdf is considered as the title
	args=("$@")
	ELEMENTS=${#args[@]}
	for (( i=0;i<$ELEMENTS;i++)); do
	    concatenate=$(echo $concatenate" ")$(echo -n ${args[${i}]}"\ ")
	done
fi

if [[ $(echo $concatenate | grep -io http) == "http" ]]; then
	locate_website
	concatenate=$(echo $concatenate | sed "s/'//g" | sed 's/\ //g' | sed 's/\\//g')
	download_link=$(echo $(curl -s $site/$concatenate) | grep -io "http.*\.pdf" | head -n 1)
	if [[ $(echo $download_link | cut -c1-2) == "//" ]]; then
		download_link=$(echo $download_link | sed 's/\/\//https:\/\//g')
	fi
	filename=$(echo $download_link | sed 's:.*/::')
	cd $destination
	if [[ $(echo $filename) == "" ]]; then
		echo "Article not found. Please check if your country is not blocking access to Sci-Hub. Use a VPN if possible."
		exit;
	else
		echo $(tput bold)"Downloading ..."$(tput sgr0)
		curl "$download_link" --output "$filename" --progress-bar
		echo $(tput setaf 2)"Done!"$(tput sgr0)
		if [ $(echo $automatically_open) = "yes" ]; then
			setsid $READER "$destination/$filename"
		fi
	fi
else
	concatenate=$(echo $concatenate | sed 's/\\//g')

	if [[ $(cat /tmp/sci_address 2> /dev/null) == "" ]]; then
		rm /tmp/sci_address 2> /dev/null
		locate_website
	fi

	if [ -f /tmp/sci_address ]; then
		site=$(echo $(cat /tmp/sci_address))
		paper_search
	else
		locate_website
		site=$(echo $(cat /tmp/sci_address))
		paper_search
	fi
fi


exit

# last modif : 2022 apr 01
# add arguments : -q = no echo ; -w --download-only ; -d --doi ;
